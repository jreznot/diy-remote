/*
 * Copyright (c) 2013, DIY-Remote Contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the StrangeWay.org nor the names of its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://raw.github.com/rodionmoiseev/maven-repo/master/repo/releases'
        }
    }
    dependencies {
        classpath 'org.rodion.gradle:idea-utils-plugin:0.1'
        classpath 'com.android.tools.build:gradle:0.5.7'
    }
}

allprojects {
    group = 'org.strangeway.diy-remote'
    version = '0.1'

    repositories {
        mavenCentral()
    }
}

apply plugin: 'idea'
apply plugin: 'idea-utils'

project(':shared') {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceSets {
        main {
            java {
                srcDir 'src'
            }
            resources {
                srcDir 'src'
            }
        }
    }
}

project(':scripting') {
    apply plugin: 'groovy'
    apply plugin: 'idea'

    sourceSets {
        main {
            java {
                srcDir 'src'
            }
            resources {
                srcDir 'src'
            }
        }
    }

    dependencies {
        compile 'org.codehaus.groovy:groovy:2.1.7'
        compile 'org.codehaus.groovy:groovy-ant:2.1.7'
        compile 'org.codehaus.groovy:groovy-sql:2.1.7'
        compile 'org.codehaus.groovy:groovy-xml:2.1.7'
        compile 'org.codehaus.groovy:groovy-json:2.1.7'
        compile 'org.codehaus.groovy:groovy-templates:2.1.7'

        compile 'org.apache.httpcomponents:httpclient:4.3'
    }
}

project(':server') {
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'idea'

    sourceSets {
        main {
            java {
                srcDir 'src'
            }
            resources {
                srcDir 'src'
            }
        }
        test {
            java {
                srcDir 'test'
            }
            resources {
                srcDir 'test'
            }
        }
    }

    dependencies {
        compile project(':shared')
        compile project(':scripting')

        testCompile 'org.testng:testng:6.8'

        compile 'org.springframework:spring-webmvc:3.2.4.RELEASE'
        compile 'org.eclipse.jetty:jetty-server:8.1.13.v20130916'
        compile 'org.eclipse.jetty:jetty-webapp:8.1.13.v20130916'
        compile 'com.google.code.gson:gson:2.2.4'

        compile 'org.apache.commons:commons-lang3:3.1'
        compile 'commons-io:commons-io:2.4'
        compile 'commons-cli:commons-cli:1.2'
    }

    applicationName = 'diy-remote'
    mainClassName = 'org.strangeway.diyremote.server.RemoteServer'
}

project(':integration:vlc') {
    apply plugin: 'groovy'
    apply plugin: 'idea'

    sourceSets {
        main {
            groovy {
                srcDirs = ['src']
            }
        }

        test {
            groovy {
                srcDirs = ['test']
            }
        }
    }

    dependencies {
        compile project(':scripting')
    }

    jar.enabled = false

    task scriptsZip(type: Zip) {
        from file('src')
    }

    artifacts {
        archives scriptsZip
    }
}

project(':integration:windows') {
    apply plugin: 'groovy'
    apply plugin: 'idea'

    sourceSets {
        main {
            groovy {
                srcDirs = ['src']
            }
        }

        test {
            groovy {
                srcDirs = ['test']
            }
        }
    }

    dependencies {
        compile project(':scripting')
    }

    jar.enabled = false

    task scriptsZip(type: Zip) {
        from file('src')
    }

    artifacts {
        archives scriptsZip
    }
}

project(':client') {
    apply plugin: 'android'
    apply plugin: 'idea'

    dependencies {
        compile project(':shared')

        compile 'com.google.code.gson:gson:2.2.4'
    }

    project.archivesBaseName = 'dyi-remote'

    android {
        compileSdkVersion 15
        buildToolsVersion '18.0.1'

        sourceSets {
            main {
                manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src']
                resources.srcDirs = ['src']
                aidl.srcDirs = ['src']
                renderscript.srcDirs = ['src']
                res.srcDirs = ['res']
                assets.srcDirs = ['assets']
            }

            instrumentTest.setRoot('test')
        }

		if (rootProject.hasProperty('android.signed')) {
	        signingConfigs {
	            release {
	                storeFile new File(new File(System.getProperty("user.home"), ".android"), "release.keystore")
	                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
	                keyAlias "android"
	                keyPassword System.getenv("ANDROID_RELEASE_PASSWORD")
	            }
	        }

	        buildTypes {
	            release {
	                debuggable false
	                jniDebugBuild false
	                signingConfig signingConfigs.release
	            }
	        }
		}
    }

    idea {
        module {
            sourceDirs += file('src')
            testSourceDirs += file('test')
        }
    }
}

idea {
    project {
        languageLevel = '1.6'
        copyright {
            name = 'The BSD 3-Clause License'
            license = file('LICENSE')
        }
        vcs {
            vcs = 'Git'
        }
    }
}

task release(dependsOn: [
        ':server:assemble',
        ':client:assemble',

        ':server:distZip',
        ':integration:vlc:scriptsZip',
        ':integration:windows:scriptsZip'], type: Copy) {

    from file('server/build/distributions')
    from file('client/build/apk/dyi-remote-release.apk')
    from file('integration/vlc/build/distributions')
    from file('integration/windows/build/distributions')
    into file('release')
}